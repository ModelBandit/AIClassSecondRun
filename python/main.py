n1, n2 = input("asd").split()

print(f"n1 {n1}")
print(f"n2 {n2}")

# range() or range(,,)
# 같은 빈 표현은 불가능

# num = 0
# for i in range(10):
#     num += (i+1)
# print(num)

# 반복문 = 순환문
# 기본적인 프로세스를 진행한다.
# 특정 구간을 주어진 조건에 만족할때까지 반복한다.

# 반복 유형
# 1) 동일한 반복
# 2) 단계적 반복
# 3) 불규칙 반복

# 반복문의 핵심은 무엇을 얼마만큼 반복 시킬것인지 정하거나
# 반복의 패턴을 찾는것이 가장 중요하다.

# arr = [1,2,3,4,5]

# na = int(input("find number: "))
# if na in arr:
#     print(f"{na} is exist")
# else:
#     print(f"{na} is not in here")

# print("result", na in arr)

# c에서는 문자열과 문자열을 비교할 수 없음
# -> 배열을 통째로 비교가 불가능함
# 하지만 파이썬은 문자열과 문자열을 비교할 수 있음

# a in b 에서 in은 멤버 연산자라 부릅니다.
# a in b 는 b안에 a 가 존재하면 참을 반환하고 존재하지 않으면 거짓을 반환
# a not in b 는 b안에 a가 존재하지 않으면 참, 존재하면 거짓을 반환합니다.

# num1 = 10
# num2 = 5

# if(num1 > num2):
#     print("num1 > num2")
# else:
#     print("is not")

# 제어문
# 기본적으로 모든 언어는 절차 지향의 속성을 갖고 있다.
# 위에서 아래, 좌에서 우로 순서로 프로세스를 진행한다.
# 하지만 필요에 따라 이 흐름을 바꾸는 문법을 제어문이라한다.
# 제어문은 크게 조건문과 반복문으로 나뉜다.

# 조건문이란? (=분기문)
# 기본 프로세스의 흐름을 타다가 어떠한 조건에 참, 거짓 여부에 따라서
# 흐름이 갈리는 구간을 만들게 된다.
# 이른 조건분기문이라한다.
# 조건문은 단순 if문, if ~else 문, if elif ...else문, 중첩 if 문등의 유형으로 나뉜다.