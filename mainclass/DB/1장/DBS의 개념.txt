1. 데이터베이스 - 데이터 저장소

같은 성질(도메인)을 갖는 데이터의 집합체

데이터 --가공--> 정보 --실적용--> 지식

데이터: 관찰의 결과로 나타난 정량적 혹은 정성적인 실제 값
정보: 데이터에 의미를 부여한 것
지식: 사물이나 현상에 대한 이해 (에베레스트산에 올라가는 가장 좋은 방법)

에베레스트의 높이 8848m

에베레스트는 가장 높은 산

에베레스트 산의 지형적 특성과 같은 보고서


2. 데이터베이스의 개념
각 조직에서 사용하던 데이터를 모아서 통합하고 서로 공유할 목적으로 구축
그 데이터의 종류는

* 통합된 데이터 Interated Data
 여러곳에서 사용하던 데이터를 하나로 저장한 데이터
 이를 통해서 데이터의 중복을 최소화한다.

* 저장된 데이터 Stored Data
전산화 된 저장 장치에 보관된 데이터를 의미함.
육안으로 확인할 수는 없지만 프로그램을 이용하여 화면에 출력하거나 인쇄물로 제작할 수 있다.

* 운영 데이터 Operational Data
단순히 임시로 저장된 데이터가 아니라 엄무를 위해 검색 목적으로  저장한 데이터

* 공용 데이터 Shared Data
한 사람이나 한 업무를 위해서 보다는 여럿이 공동으로 같이 쓰는 데이터


3. 데이터베이스의 특징

* 실시간 접근성 Real Time Accessibillity
 실시간으로 대기하다 요청이 온다면 수 초 내로 데이터를 줄 수 있어야 함.

* 계속적인 변화 Continuous Change
 삽입, 삭제, 수정 작업을 할 수 있어야 함.

* 동시 공유 Concurrent Sharing
동시에 여러 이용자가 요청한 데이터에 접근이 가능해야 한다.

* 내용에 따른 참조 Reference by Contents
데이터가 가진 물리적인 위치가 아닌 값을 참조하여 관측된다.


4. 데이터베이스 시스템의 구성

DBMS: 데이터베이스를 관리하는 시스템이 상시 대기하며 사용자와 DB를 연결해주어야 한다.
 - 메모리에 올라가서 돌고있는 소프트웨어

데이터베이스: 데이터를 모아둔 토대
 - 물리적으로 데이터를 저장하고 있는 하드디스크

데이터 모델: 데이터가 저장되는 기법.
 - 논리적인 개념이며 저장 스타일을 의미한다.

* 사용자에 따라서 각자 다른 인터페이스를 이용하여 DBMS에 접근하고 DBMS는 DB에 접근하여 요청된 데이터를 검색하여 반환한다. 

사용자의 종류는
* 일반사용자 - 프로그래머가 개발한 프로그램을 이용하여 접근
* 응용프로그래머 - 프로그래밍 언어와 SQL을 이용하여 사용자를 위한 인터페이스와 데이터를 관리하는 응용 로직을 개발
* SQL 사용자 - 응용 프로그램에 구현되지 않은 업무를 SQL로 처리 - 
* 데이터베이스 관리자(DBA, Database Administrator) - 데이터 설계, 구현, 유지보수의 전 과정을 담당.
  사용자 통제,보안, 성능 모니터링, 데이터 전체 파악 및 관리, 데이터 이동 및 복사 등 제반 업무를 함

* PL/SQL - 오라클 데이터베이스에서 SQL을 확장하기 위해 사용하는 절차적 프로그래밍 언어
* 프로그래밍 언어처럼 분기나 반복문 작업을 위해서 PL/SQL을 쓸 수 있다고함

데이터베이스 구조
 * 외부 스키마
 일반 사용자나 응용 프로그래머가 접근하는 계층
 여러개의 외부 스키마가 있을 수 있으며

 *뷰의 개념에서는 서브 스키마 라고도 불린다.
 뷰 - 스코프? 클래스?

속성 - Cardinality - 차수
튜플 - Degree - 기수

5. DBMS의 장점
파일 시스템보다 빠름
데이터를 공유하여 중복 가능성을 최소화하고 이를 통해 데이터의 일관성을 유지한다.
또 데이터 구조가 변경되더라도 프로그램을 수정할 필요가 없어 데이터 독립성을 유지할 수 있다.

6. SQL Struct Query Language - 영어로 읽을때 시퀄
dbms 전용 언어로

DML Data Manipulation Language - 데이터 조작어

DDL Data Definition Language - 데이터 정의어

DCL Data Control Language - 데이터 제어어

TCL Transaction Control Language - 트랜잭션 제어어

가 여기 포함된다.

7. 데이터베이스 관리자 (DBA) - DB총괄

8. 데이터 모델

***계층 데이터 모델 (Hierarchical Data Model) - 링크드 리스트
네트워크 데이터 모델 (Network Data Model) - 모든 노드를 연결함
***객체 데이터 모델 (Object Data Model) - 노드안에 노드를 배치함 뷰?
관계 데이터 모델 (Relational Data Model) -> 점유율 높은거
객체 - 관계 데이터 모델 (Object-Relational Data Model): ORM -> 관계 모델과 객체 모델의 장점이 결함된 모델 -> 무거움 
 
9. 3단계 데이터베이스 구조

 * 외부 스키마
일반 사용자나 응용 프로그래머가 접근하는 계층, 전체 데이터베이스 중에서 하나의 논리적인 부분을 의미를
외부 스키마는 여러개가 있을 수 있고 view의 개념에서 서브스키마로도 칭함

 * 개념 스키마
 전체 데이터베이스의 정의를 의미
 통합 조직별로 하나만 존재하며 DBA가 관리함
 하나의 데이터베이스에는 하나의 개념 스키마(conceptual schema)가 있음

 * 내부 스키마
 물리적 저장 장치에 데이터베이스가 실제로 저장되는 방법의 표현
 내부 스키마는 하나
 인덱스, 데이터 레코드의 배치 방법, 데이터 압축 등에 고나한 사항이 포함됨


10. 데이터 독립성

논리적 데이터 독립성

외부와 개념 사이의 독립성
개념 스키마가 변경되어도 외부에 영향을 미치지 않도록 설계 - 뷰
논리적 구조가 변경 되어도 응용 프로그램에는 영향이 없도록 하는 개념 - 뷰
***개념 스키마의 테이블을 생성하거나 변경하여도 외부 스키마가 직접 다루는 테이블이 아니면 영향이 없음 - 뷰

물리적 데이터 독립성

개념, 내부 사이의 독립성
저장장치 구조 변경과 같이 내부 스키마가 변경되어도 개념 스키마에 영향을 미치지 않도록 지원
성능 개선을 위하여 물리적 저장 장치를 재구성할 경우 개념 스키마나 응용 프로그램 같은 외부 스키마에 영향이 없음
물리적 독립성은 논리적 독립성보다 구현하기 쉬움